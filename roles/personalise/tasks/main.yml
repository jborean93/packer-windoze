---
- name: install and enable TLSv1.3 for Server 2022
  when: inventory_hostname == 'win-2022'
  block:
  - name: enable TLSv1.3 support for Server 2022
    win_regedit:
      path: HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.3\{{ item.type }}
      name: '{{ item.property }}'
      data: '{{ item.value }}'
      type: dword
      state: present
    register: pri_personalise_tls_config
    loop:
    - type: Server
      property: Enabled
      value: 1
    - type: Server
      property: DisabledByDefault
      value: 0
    - type: Client
      property: Enabled
      value: 1
    - type: Client
      property: DisabledByDefault
      value: 0

  - name: reboot if TLS config was applied
    win_reboot:
    when: pri_personalise_tls_config is changed

- name: disable shutdown tracker
  win_regedit:
    path: HKLM:\Software\Policies\Microsoft\Windows NT\Reliability
    name: '{{ item }}'
    data: 0
    type: dword
    state: present
  loop:
  - ShutdownReasonOn
  - ShutdownReasonUI

- name: set show hidden files/folders and file extensions for the default user profile
  win_regedit:
    path: HKLM:\ANSIBLE\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
    name: '{{ item.name }}'
    data: '{{ item.data }}'
    type: dword
    state: present
    hive: C:\Users\Default\NTUSER.dat
  loop:
  - name: Hidden
    data: 1
  - name: HideFileExt
    data: 0

- name: set This PC as the default view for Windows Explorer for the default user profile
  win_regedit:
    path: HKLM:\ANSIBLE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced
    name: LaunchTo
    data: 1
    type: dword
    state: present
    hive: C:\Users\Default\NTUSER.dat
  when:  # this is only valid for 2016/10+
  - inventory_hostname != 'win-2012'
  - inventory_hostname != 'win-2012r2'

- name: set show hidden files/folders and file extensions for the current user profile
  win_regedit:
    path: HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced
    name: '{{ item.name }}'
    data: '{{ item.data }}'
    type: dword
    state: present
  loop:
  - name: Hidden
    data: 1
  - name: HideFileExt
    data: 0

- name: set This PC as the default view for Windows Explorer for the current user profile
  win_regedit:
    path: HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced
    name: LaunchTo
    data: 1
    type: dword
    state: present
  when:
  - inventory_hostname != 'win-2012'
  - inventory_hostname != 'win-2012r2'

- name: disable automatic updates (prevents TrustedInstaller startup thrash on older images)
  win_regedit:
    path: HKLM:\Software\Policies\Microsoft\Windows\WindowsUpdate\AU
    name: NoAutoUpdate
    data: 1
    type: dword
    state: present

- name: install set Chocolatey packages
  win_chocolatey:
    name: '{{ choco_packages }}'
    ignore_checksums: yes
    state: present
  register: choco_package_install
  when:
  - choco_packages | count > 0
  - choco_packages[0] != ''
  become: yes
  vars:  # run with become as we aren't sure what packages the user has specified
    ansible_become_user: '{{ ansible_user }}'
    ansible_become_pass: '{{ ansible_password }}'

- name: configure pwsh
  when: '"pwsh" in choco_packages'
  block:
  # It seems like PATH isn't updated straight await. Might need a bounce of the WinRM service
  # but that's harder to achieve so just reboot the host to be safe
  - name: reboot host to update PATH env
    win_reboot:
    when: choco_package_install is changed

  - name: configure PSRemoting for pwsh
    jborean93.windoze.psremoting:

  - name: get pwsh path
    win_shell: |
      $pwsh = Get-Command -Name pwsh.exe -CommandType Application -ErrorAction SilentlyContinue
      if ($pwsh) {
          (New-Object -ComObject Scripting.FileSystemObject).GetFile($pwsh.Path).ShortPath
      }
    changed_when: False
    register: pri_personalize_pwsh_path
    retries: 5  # Found intermittent errors here, just try a few times - might need to replace the COM side.
    delay: 5
    until: pri_personalize_pwsh_path is successful

  - name: set output fact for OpenSSH to use for pwsh subsystem path
    set_fact:
      out_personalize_pwsh_path: '{{ pri_personalize_pwsh_path.stdout | trim }}'

- name: module updates for PowerShell Pre 5.1
  when:
  - inventory_hostname in ['win-2012', 'win-2012r2']
  block:
  - name: install PowerShellGet, PackageManagement
    ansible.windows.win_powershell:
      script: |
        [CmdletBinding()]
        param()

        $ErrorActionPreference = 'Stop'
        $Ansible.Changed = $false

        Add-Type -AssemblyName System.IO.Compression.FileSystem | Out-Null
        [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12
        $moduleDir = Join-Path -Path $env:ProgramFiles -ChildPath (Join-Path -Path "WindowsPowerShell" -ChildPath "Modules")
        if (-not (Test-Path -LiteralPath $moduleDir)) {
            New-Item -Path $moduleDir -ItemType Directory | Out-Null
            $Ansible.Changed = $true
        }

        foreach ($package in @("PowerShellGet", "PackageManagement")) {
            $targetDir = Join-Path -Path $moduleDir -ChildPath $package
            if (Test-Path -LiteralPath $targetDir) {
                continue
            }
            $Ansible.Changed = $true

            $searchUri = 'https://www.powershellgallery.com/api/v2/Packages?$filter=Id eq ''{0}'' and IsLatestVersion' -f $package
            $res = Invoke-RestMethod -Uri $searchUri
            $sourceUri = $res.Content.src
            $moduleTmp = Join-Path -Path $Ansible.Tmpdir -ChildPath $package
            New-Item -Path $moduleTmp -ItemType Directory | Out-Null

            $moduleZip = Join-Path -Path $moduleTmp -ChildPath "$package.zip"
            (New-Object -TypeName System.Net.WebClient).DownloadFile($sourceUri, $moduleZip)
            [System.IO.Compression.ZipFile]::ExtractToDirectory($moduleZip, $moduleTmp)

            New-Item -Path $targetDir -ItemType Directory | Out-Null
            Copy-Item -Path (Join-Path -Path $moduleTmp -ChildPath "*") -Destination $targetDir -Recurse

            # Remove some extra files that would be in the npkg
            Remove-Item -LiteralPath (Join-Path -Path $targetDir -ChildPath "$package.zip") -Force -Recurse
            Remove-Item -LiteralPath (Join-Path -Path $targetDir -ChildPath "$package.nuspec") -Force -Recurse
            Remove-Item -LiteralPath (Join-Path -Path $targetDir -ChildPath "[Content_Types].xml") -Force -Recurse
            Remove-Item -LiteralPath (Join-Path -Path $targetDir -ChildPath "_rels") -Force -Recurse
            Remove-Item -LiteralPath (Join-Path -Path $targetDir -ChildPath "package") -Force -Recurse
        }

  # This is the latest version that is available for PowerShell pre 5.1
  - name: install PSReadLine 1.2
    ansible.windows.win_powershell:
      script: |
        [CmdletBinding()]
        param()

        $ErrorActionPreference = 'Stop'
        $Ansible.Changed = $false

        if (-not (Get-Module -Name PSReadLine -ListAvailable)) {
            Install-Module -Name PSReadLine -RequiredVersion '1.2' -Force
            $Ansible.Changed = $true
        }
    # Remove once 2012 is gone
    environment:
      PSModulePath: C:\Program Files\WindowsPowerShell\Modules

- name: module updates for PowerShell 5.1
  when:
  - inventory_hostname not in ['win-2012', 'win-2012r2']
  block:
  - name: remove the older Pester install
    ansible.windows.win_file:
      path: C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0
      state: absent

  - name: install newer versions of Pester, PowerShellGet, PackageManagement, and PSReadLine
    ansible.windows.win_powershell:
      script: |
        [CmdletBinding()]
        param()

        $ErrorActionPreference = 'Stop'
        $Ansible.Changed = $false

        # Needed for Server 2016
        [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12

        if (-not (Get-PackageProvider -Name NuGet -ListAvailable -ErrorAction SilentlyContinue)) {
            Install-PackageProvider -Name NuGet -Force -ForceBootstrap | Out-Null
            $Ansible.Changed = $true
        }

        foreach ($package in @("Pester", "PackageManagement", "PowerShellGet", "PSReadLine")) {
            $latestVersion = Find-Module -Name $package -AllVersions -ErrorAction SilentlyContinue |
                Sort-Object -Property Version -Descending |
                Select-Object -ExpandProperty Version -First 1
            $installedVersions = Get-Module -Name $package -ListAvailable

            $installed = $installedVersions | Where-Object Version -eq $latestVersion
            if ($installed) {
                continue
            }

            Install-Module -Name $package -Force
            $Ansible.Changed = $true

            # Output for the next task to remove
            if ($installedVersions) {
                $installedVersions.ModuleBase
            }
        }
    register: pri_personalize_pwsh_packages

  # This needs to be done in a separate process as the above would have loaded some dlls and locked the dir
  - name: remove older versions of PowerShellGet, PackageManagement, and PSReadLine
    win_file:
      path: '{{ item }}'
      state: absent
    with_items: '{{ pri_personalize_pwsh_packages.output }}'

- name: install the VirtualBox Guest Additions
  include_tasks: virtualbox.yml
  when: platform == 'virtualbox'

- name: install the QEMU Guest Additions
  include_tasks: qemu.yml
  when: platform == 'qemu'
